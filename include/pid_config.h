#ifndef PID_CONFIG_H
#define PID_CONFIG_H

/* Warning: generated by cbindgen. Do not edit manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define PID_CONFIG_SUCCESS 0

#define PID_CONFIG_ERROR_NULL_POINTER (int32_t)UINT8_MAX

typedef struct PidConfig_f64 PidConfig_f64;

typedef struct PidConfigF64 {
  struct PidConfig_f64 inner;
} PidConfigF64;

 const char *pid_config_error_to_string(int32_t error_code);

 struct PidConfigF64 *pid_config_create(void);

 struct PidConfigF64 *pid_config_create_with_gains(double kp, double ki, double kd);


struct PidConfigF64 *pid_config_create_with_gains_and_sample_time(double kp,
                                                                  double ki,
                                                                  double kd,
                                                                  double sample_time);

/**
 * Gets the proportional gain (Kp) of the PID controller.
 *
 * # Arguments
 * * `config`: A pointer to the PidConfigF64 struct.
 *
 * # Returns
 * * `f64`: The proportional gain value.
 *
 * # Safety
 * If the pointer to the config object is null, this function will return -1.0
 */
 double pid_config_get_kp(const struct PidConfigF64 *config);

/**
 * Gets the integral gain (Ki) of the PID controller.
 *
 * # Arguments
 * * `config`: A pointer to the PidConfigF64 struct.
 *
 * # Returns
 * * `f64`: The integral gain value.
 *
 * # Safety
 * If the pointer to the config object is null, this function will return -1.0
 */
 double pid_config_get_ki(const struct PidConfigF64 *config);

/**
 * Sets the proportional gain (Kp) of the PID controller.
 *
 * # Arguments
 * * `config`: A pointer to the PidConfigF64 struct.
 * * `kp`: The new proportional gain value.
 *
 * # Returns
 * * `i32`: An error code indicating if the operation succeeded
 *
 * # Safety
 * If the pointer to the config object is null, this function will return false
 */
 int32_t pid_config_set_kp(struct PidConfigF64 *config, double kp);

/**
 * Sets the integral gain (Ki) of the PID controller.
 *
 * # Arguments
 * * `config`: A pointer to the PidConfigF64 struct.
 * * `ki`: The new integral gain value.
 *
 * # Returns
 * * `i32`: An error code indicating if the operation succeeded
 *
 * # Safety
 * If the pointer to the config object is null, this function will return false
 */
 int32_t pid_config_set_ki(struct PidConfigF64 *config, double ki);

/**
 * Sets the derivative gain (Kd) of the PID controller.
 *
 * # Arguments
 * * `config`: A pointer to the PidConfigF64 struct.
 * * `kd`: The new derivative gain value.
 *
 * # Returns
 * * `i32`: An error code indicating if the operation succeeded
 *
 * # Safety
 * If the pointer to the config object is null, this function will return false
 */
 int32_t pid_config_set_kd(struct PidConfigF64 *config, double kd);

/**
 * Sets the sample time of the PID controller.
 *
 * # Arguments
 * * `config`: A pointer to the PidConfigF64 struct.
 * * `sample_time`: The new sample time value in seconds.
 *
 * # Returns
 * * `i32`: An error code indicating if the operation succeeded
 *
 * # Safety
 * If the pointer to the config object is null, this function will return false
 */
 int32_t pid_config_set_sample_time(struct PidConfigF64 *config, double sample_time);

/**
 * Sets the output limits of the PID controller.
 *
 * # Arguments
 * * `config`: A pointer to the PidConfigF64 struct.
 * * `min`: The minimum output limit.
 * * `max`: The maximum output limit.
 *
 * # Returns
 * * `i32`: An error code indicating if the operation succeeded
 *
 * # Safety
 * If the pointer to the config object is null, this function will return false
 */
 int32_t pid_config_set_output_limits(struct PidConfigF64 *config, double min, double max);

/**
 * Deallocates a PidConfigF64 object.
 *
 * # Arguments
 * * `config`: A pointer to the PidConfigF64 object to deallocate.
 *
 * # Safety
 * The pointer must be valid and must have been allocated by the corresponding creation function.
 */
 void pid_config_destroy(struct PidConfigF64 *config);

#endif  /* PID_CONFIG_H */
